---
name: Build Image

on:
  workflow_call:
    inputs:
      name:
        description: build name
        default: Build Container Image
        type: string
        required: false
      author:
        description: container author
        default: Anthonius Munthi <me@itstoni.com>
        type: string
        required: false
      description:
        description: container description
        default: API Template Container
        type: string
        required: false
      target:
        description: Build target
        default: frankenphp_prod
        type: string
        required: false
      goss:
        description: Runs goss testing
        default: false
        type: boolean
        required: false
      goss_file:
        description: goss.yaml file location
        default: ./frankenphp/goss.yaml
        type: string
        required: false

env:
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  build:
    name: ${{ inputs.name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup workflow vars
        id: vars
        shell: bash
        run: |
          date_version=$(date +'%Y%m%d%H%M%S')
          tag_version="${{ github.ref_name }}-${date_version}"
          tags="${{ env.IMAGE_PREFIX }}:${tag_version}"

          ref="${{ github.ref_name }}"
          if [[ $ref == v* ]]; then
            tag_version="${{ github.ref_name }}"
            tags="${{ env.IMAGE_PREFIX }}:${{ github.ref_name }},${{env.IMAGE_PREFIX}}:latest"
          fi

          echo "tags=${tags}" >> $GITHUB_OUTPUT
          echo "tag_version=${tag_version}" >> $GITHUB_OUTPUT
          echo "build_date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

      - name: Setup GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Goss
        if: inputs.goss
        uses: e1himself/goss-installation-action@v1
        with:
          version: latest

      - name: Build container testing image
        if: inputs.goss
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ inputs.target }}
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ env.IMAGE_PREFIX }}:testingz
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss tests
        id: dgoss
        shell: bash
        if: inputs.goss
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ inputs.goss_file }}
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: dgoss run ${{ env.IMAGE_PREFIX }}:testingz

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          labels: |
            maintainer=${{ inputs.author }}
            org.opencontainers.image.author=${{ inputs.author }}
            org.opencontainers.image.description=${{ inputs.description }}
            org.opencontainers.image.version=${{ steps.vars.outputs.tag_version }}
          annotations: |
            org.opencontainers.image.description=${{ inputs.description }}

      - name: Build and push container image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ inputs.target }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.vars.outputs.tags }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}
